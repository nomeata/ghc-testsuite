
TcCoercibleFail.hs:11:8:
    No instance for (Coercible Int ())
      because ‛Int’ and ‛()’ are different types.
      arising from a use of ‛coerce’
    In the expression: coerce
    In the expression: coerce $ one :: ()
    In an equation for ‛foo1’: foo1 = coerce $ one :: ()

TcCoercibleFail.hs:14:8:
    Could not deduce (Coercible (m Int) (m Age))
      because ‛m Int’ and ‛m Age’ are different types.
      arising from a use of ‛coerce’
    from the context (Monad m)
      bound by the type signature for foo2 :: Monad m => m Age
      at TcCoercibleFail.hs:13:9-34
    In the expression: coerce
    In the expression: coerce $ (return one :: m Int)
    In an equation for ‛foo2’: foo2 = coerce $ (return one :: m Int)

TcCoercibleFail.hs:16:8:
    No instance for (Coercible (IO Int) (IO Age))
      because the constructor of ‛IO’ is not imported
      arising from a use of ‛coerce’
    In the expression: coerce
    In the expression: coerce $ (return one :: IO Int) :: IO Age
    In an equation for ‛foo3’:
        foo3 = coerce $ (return one :: IO Int) :: IO Age

TcCoercibleFail.hs:18:8:
    No instance for (Coercible Int (Private Int))
    because the constructor of ‛Private’ is not imported
      arising from a use of ‛coerce’
    In the expression: coerce
    In the expression: coerce $ one :: Private Int
    In an equation for ‛foo4’: foo4 = coerce $ one :: Private Int

TcCoercibleFail.hs:24:8:
    No instance for (Coercible (Private Int) (Private Age))
      because the constructor of ‛Private’ is not imported
      arising from a use of ‛coerce’
    In the expression: coerce
    In the expression:
        coerce $ WrapPrivate (mkPrivate one) :: WrapPrivate Age
    In an equation for ‛foo6’:
        foo6 = coerce $ WrapPrivate (mkPrivate one) :: WrapPrivate Age

TcCoercibleFail.hs:28:8:
    No instance for (Coercible (WrapPrivate' Int) (WrapPrivate' Age))
      because the constructor of ‛Private’ (used within ‛WrapPrivate'’)
      is not imported
      arising from a use of ‛coerce’
    In the expression: coerce
    In the expression:
        coerce $ WrapPrivate' (mkPrivate one) :: WrapPrivate' Age
    In an equation for ‛foo7’:
        foo7 = coerce $ WrapPrivate' (mkPrivate one) :: WrapPrivate' Age

TcCoercibleFail.hs:32:8:
    No instance for (Coercible (Void ()) ())
      because ‛Void’ is a recursive type constuctor
      arising from a use of ‛coerce’
    In the expression: coerce :: (Void ()) -> ()
    In an equation for ‛foo8’: foo8 = coerce :: (Void ()) -> ()
